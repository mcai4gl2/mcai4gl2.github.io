<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Softwares on Blog of Random things</title><link>https://mcai4gl2.github.io/softwares/</link><description>Recent content in Softwares on Blog of Random things</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Apr 2022 07:55:59 +0800</lastBuildDate><atom:link href="https://mcai4gl2.github.io/softwares/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World Application with ZeroC Ice</title><link>https://mcai4gl2.github.io/softwares/ice/</link><pubDate>Sun, 17 Apr 2022 07:55:59 +0800</pubDate><guid>https://mcai4gl2.github.io/softwares/ice/</guid><description>Ice is ZeroC&amp;rsquo;s opensource RPC framework which supports interoperability in multiple languages. With Ice framework, it takes care of server management, discovery, and serialization, so developer can concentrate on business logic.
When creating Ice application, the first step is create a slice file. This file sets up the contract/interface between client and server. In our hello world application, we use the following very simple Hello interface.
module Demo { interface Hello { string SayHello(string username); }; }di The next step is to use ice tool slice2py to compile the .</description></item><item><title>Triaging Path Issue with tabula-py</title><link>https://mcai4gl2.github.io/softwares/tabula-py-path/</link><pubDate>Sat, 19 Mar 2022 14:04:31 +0800</pubDate><guid>https://mcai4gl2.github.io/softwares/tabula-py-path/</guid><description>I have been big fan of Jupyter Notebooks ever since it was still called ipython. The ability to be able to interactively develop code with immediate data cached is extremely powerful for quick prototyping and data exploration. Originally started for python, Jupyter nowadays supports all different programming languages.
Recently, I have been working on a Java project at home. So, I took sometime to test IJava and get it working with Java 17 in docker.</description></item><item><title>How fast can I read?</title><link>https://mcai4gl2.github.io/softwares/disk-read/</link><pubDate>Thu, 22 Jul 2021 15:04:15 +0800</pubDate><guid>https://mcai4gl2.github.io/softwares/disk-read/</guid><description>Computer storage has changed so much over last few decades, in both size and speed terms. We see a lot of amazing performance test results for NVMe drives nowadays. We could copy files much faster from one place to another. But what does it mean for software developers? How fast we shall expect our code to read? The following is some test results I have done in Java.
The data file I am trying to read is the GDELT 1.</description></item></channel></rss>